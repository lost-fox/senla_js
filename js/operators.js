//1 Записать в коротком виде:
// let a = a + 5;
// let b = b * 15;
// let c = c - 3;
// let d = d % 2;
// let k = a + k;
// let l = l * b;
// let m = m * 3 * k;


// let a += 5;
// let b *= 15;
// let c -= 3;
// let d %= 2;
// let k += a ;
// let l *=  b;
//let m *= 3 * k;

//2 Возвести переменную в куб, используя краткую запись.
let cube=3;
cube**=3;

console.log(cube);

//3 Если переменная равна “маленький”, присвоить ей значение “большой”, иначе “маленький”. Сделать тоже самое, используя тернарный оператор.
let a = 'большой';
if (a==='маленький'){
 a='большой';
}else{
   a='маленький';
}

console.log(a);

let aTern = 'большой';

aTern = (aTern==='маленький')? 'большой' : 'маленький';

console.log (aTern);

//4 Записать условие, используя условный оператор if: если переменная меньше нуля: присвоить ей строку “меньше нуля” если переменная равна нулю: присвоить 1 если больше нуля: используя краткую запись, умножить переменную на 10 Сделать тоже самое, используя тернарный оператор.
let n=4;
if (n<0){
   n = 'меньше нуля';
}
else if (n==0){
  n=1;
}
else {
 n*=10;
}

console.log (n);

let nTern = 4;

nTern = (nTern<0)? 'меньше нуля' : 
         (nTern == 0)? nTern=1 : nTern*=10;
console.log (nTern);

//5 Используя конструктор switch, записать следующее условие:
// if(a == 'котик') {
//    console.log('котик');
//  } else if(a == 'собака') {
//    console.log('собака');
//  } else if(a == 'хомячок') {
//    console.log('хомячок');
//  } else {
//    console.log('неизвестное науке животное');
//  }
//  Важно: в консоли вы должны увидеть только одно условие из 4х.
let animal = 'котик';
switch(animal){
   case 'котик':
   console.log('котик'); 
   break;
   case 'собака':
   console.log('собака'); 
   break;
   case 'хомячок':
   console.log('хомячок'); 
   break;
   default:
  console.log('неизвестное науке животное');
}

//6 Чему равен x в каждом из примеров, объясните почему:
//let x = 0 || 'строка';
//x = 'строка' =>  false ИЛИ true  вернул значение true

//let x = 1 && 'строка';
//x = 'строка'  => true И true  вернул последнее истинное значение

// let x = null || 1;
//x = 1 => false ИЛИ true вернул значение true 

// let x = null && 1;
// x = null => false И true  вернул значение false 

// let x = 1 && null;
// x = null =>  true И false  вернул значение false 

// let x = null || 0 || 1;
//x = 1 => false ИЛИ false ИЛИ true  вернул значение true

 //let x = null && 0 && 1;
//x = null => false И false И true вернул первое значение false 

//7 Чему равен x в каждом из примеров, объясните почему:
//let x = 1 + 2 + '3';
// x = 33 => 1+2=3 3 - строка, +перед 3 - конкатенация

//let x = 1 + 2 - '1';
//x = 2 => -1 преобразовалось из типа строки в число

//let x = '1' + 2 - 1;
//x = 11 =>  1 конкатенация 2-1=1

//let x = true + 1;
//x=2 => true преобразовался из типа boolean в тип number со значением 1. 1+1 =2

//let x = +'1' + 2;
//x = 3 => 1 преобразовалась из типа строка в тип число. 1+2=3

//let x = null + 2;
//x = 2 => null - пустое значение. 0 + 2 =2

//let x = undefined + 2;
//x = NaN => undefined - значение не присвоено. ничего + 2 = NaN

//let x = true + undefined;
//x = NaN => логическое значение + значение не присвоено = NaN